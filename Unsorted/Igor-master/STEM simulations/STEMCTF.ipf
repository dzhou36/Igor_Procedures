#pragma rtGlobals=1		// Use modern global access method.
#include "STEMPSF"

// Functions to calculate the STEM contrast transfer function (CTF)
// in the incoherent imaging model.
//
//
// 01-06-10 rewritten to support full coherent aberrations generated by CEOS software on the Titan
//                and to use CEOS notation for aberrations (yuck).  pmv
// 02-05-10 added effects of a Gaussian source function 
//
// Aberration parameters are:
//	C1, defocus, in nm
//	A1, 2-fold astigmatism, in nm
//	A2, 3-fold astigmatism, in nm
//	B2, axial coma, in nm
//	C3, primary spherical aberration, in um
//	A3, 4-fold astigmasitm, in um
//	S3, star aberration, in um
//	A4, 5-fold astigmatism, in um
//	D4, 3-lobe aberration, in um
//	B4, axial coma, in um
//	C5, 5th order spherical aberration, in mm
//	A5, 5th order spherical aberration, in mm
//
// Aberrations must be specified in a 12x2 wave.  The first column is the aberration coefficient, the
// second is the rotation angle.  Rotation angles for axially symmetric aberrations (C1, C3, C5) are
// ignored.  Aberrations can be set to zero.
//
// Other required parameters are:
// Cc = chromatic aberration coefficient in mm
// dE = beam energy spread (FWHM) in eV
// ds = source function FWHM.  Source is assumed to be Gaussian
// keV = beam energy in kV
// ap = condenser aperture in mrad
// nk = number of k points to integrate over in calculating the PSF
//
// In the function names "Coh" means coherent, without chromatic aberration.  "Incoh" means incoherent,
// or with chromatic aberration.  Neither includes spatial incoherence (source size).

function STEMCTF2DCoh(aber, keV, ap, nk)
	wave aber
	variable keV, ap, nk
	
	STEMPSF2DCoh(aber, keV, ap, nk)
	wave/C probe2DCoh = $"probe2DCoh"
	
	Redimension/C probe2DCoh
	FFT probe2DCoh
	probe2DCoh = cmplx(sqrt(magsqr(probe2DCoh)), 0)
	Redimension/R probe2DCoh
	
	Duplicate/O probe2DCoh CTF2DCoh
	Killwaves probe2DCoh
	
end

function STEMCTF1DCoh(aber, keV, ap, nk)
	wave aber
	variable keV, ap, nk
	
	STEMCTF2DCoh(aber, keV, ap, nk)
	wave CTF2DCoh = $"CTF2DCoh"
	
	AnnularAverage(CTF2DCoh, 0.0, 0.0, 1.0)
	Duplicate/O annular_av CTF1DCoh
	Killwaves annular_av, CTF2DCoh
	
end

function STEMCTF2DIncoh(aber, keV, Cc, dE, ds, ap, nk)
	wave aber
	variable keV, Cc, dE, ds, ap, nk
	
	STEMPSF2DIncoh(aber, keV, Cc, dE, ds, ap, nk)
	wave/C probe2DIncoh = $"probe2DIncoh"
	
	Redimension/C probe2DIncoh
	FFT probe2DIncoh
	probe2DIncoh = cmplx(sqrt(magsqr(probe2DIncoh)), 0)
	Redimension/R probe2DIncoh
	
	Duplicate/O probe2DIncoh CTF2DIncoh
	Killwaves probe2DIncoh
	
end

function STEMCTF1DIncoh(aber, keV, Cc, dE, ds, ap, nk)
	wave aber
	variable keV, Cc, dE, ds, ap, nk
	
	STEMCTF2DIncoh(aber, keV, Cc, dE, ds, ap, nk)
	wave CTF2DIncoh = $"CTF2DIncoh"
	
	AnnularAverage(CTF2DIncoh, 0.0, 0.0, 1.0)
	Duplicate/O annular_av CTF1DIncoh
	Killwaves annular_av, CTF2DIncoh
	
end


function STEMCTF1DCoh_df(df_min, df_max, ndf, aber, keV, ap, nk)
	variable df_min, df_max, ndf
	wave aber
	variable keV, ap, nk
	
	Make/O/N=(ceil(nk/2), ndf) STEMCTF1DCoh_v_df
	SetScale/I y df_min, df_max, "", STEMCTF1DCoh_v_df
	
	aber[0][0] = df_min
	STEMCTF1DCoh(aber, keV, ap, nk)
	wave oneCTF = $"CTF1DCoh"
	SetScale/P x 0, deltax(oneCTF), "", STEMCTF1DCoh_v_df
	STEMCTF1DCoh_v_df[][0] = oneCTF[p]
	
	variable i
	for(i=1; i<ndf; i+=1)
		aber[0][0] = DimOffset(STEMCTF1DCoh_v_df, 1) + i*DimDelta(STEMCTF1DCoh_v_df, 1)
		STEMCTF1DCoh(aber, keV, ap, nk)
		SetScale/P x 0, deltax(oneCTF), "", STEMCTF1DCoh_v_df
		STEMCTF1DCoh_v_df[][i] = oneCTF[p]
	endfor
	
end

//function stemctf_df(ctf, C5, Cs, Cc, dE, keV, ap)
//	wave ctf
//	variable C5, Cs, Cc, dE, keV, ap
//	
//	make/o/n=(Dimsize(ctf, 0)) ctf_1D
//	Setscale/P x DimOffset(ctf, 0), DimDelta(ctf, 0), "", ctf_1D
//	
//	variable ndf = DimSize(ctf, 1)
//	variable df, ii
//	for(ii=0; ii<ndf; ii+=1)
//		df = DimOffSet(ctf, 1) + DimDelta(ctf, 1)*ii
//		stemctf(ctf_1D, C5, Cs, df, Cc, dE, keV, ap)
//		ctf[][ii] = ctf_1D[p]
//	endfor
//	
//	Killwaves ctf_1D
//end